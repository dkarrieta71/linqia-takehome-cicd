name: CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  packages: read
  pull-requests: write

jobs:
  deploy-mock:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Derive PR number and branch
        id: pr
        run: |
          # Get PR number from workflow_run payload (first PR)
          PR_NUMBER=$(jq -r '.workflow_run.pull_requests[0].number // empty' "$GITHUB_EVENT_PATH")
          HEAD_BRANCH=$(jq -r '.workflow_run.head_branch' "$GITHUB_EVENT_PATH")
          REPO_FULL=$(jq -r '.repository.full_name' "$GITHUB_EVENT_PATH" | tr '[:upper:]' '[:lower:]')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "repo=$REPO_FULL" >> $GITHUB_OUTPUT

      - name: Stop if not from a PR
        if: ${{ steps.pr.outputs.pr_number == '' }}
        run: echo "No PR associated with the triggering run; skipping comment."

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull image
        id: pull
        run: |
          IMAGE="ghcr.io/${{ steps.pr.outputs.repo }}:${{ steps.pr.outputs.branch }}"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
          docker pull "$IMAGE"

      - name: Mock deploy (docker run)
        id: runapp
        run: |
          set -e
          # The sample app supports: python -m sample_app 2 3 -> prints 5
          # Our Dockerfile sets python as entrypoint, so pass module + args:
          OUTPUT=$(docker run --rm "${{ steps.pull.outputs.image }}" -m sample_app 2 3)
          echo "output=$OUTPUT" >> $GITHUB_OUTPUT
          echo "Container output: $OUTPUT"

      - name: Post deployment status to PR
        if: ${{ steps.pr.outputs.pr_number != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number(`${{ steps.pr.outputs.pr_number }}`);
            const image = `${{ steps.pull.outputs.image }}`;
            const output = `${{ steps.runapp.outputs.output }}`;
            const body = [
              '### CD Status',
              `**Image pulled:** \`${image}\``,
              `**Mock deployment:** \`docker run ${image} -m sample_app 2 3\``,
              `**App output:** \`${output}\``,
              '',
              '> Deployment simulated inside GitHub Actions runner.'
            ].join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            });
