name: CI

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

permissions:
    contents: read
    packages: write        # needed to push to GHCR
    pull-requests: write   # needed to post sticky PR comments

jobs:
    test-lint-build:
        name: Lint, Test, Build & Push
        runs-on: ubuntu-latest

        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.10", "3.11", "3.12"]

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}
                  cache: "pip"

            - name: Install dev deps
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements-dev.txt || true
                  pip install pytest pytest-cov coverage ruff black

            - name: Lint (ruff)
              run: ruff check .

            - name: Format check (black)
              run: black --check .

            - name: Run tests with coverage (xml + text)
              run: |
                    pytest -q \
                        --junitxml=junit.xml \
                        --cov=sample_app \
                        --cov-report=term-missing:skip-covered \
                        --cov-report=xml \
                        --cov-report=html \
                        --cov-fail-under=90
                    coverage report | tee coverage.txt

            - name: Enforce coverage threshold (90%)
              id: covgate
              run: |
                  # Parse "TOTAL ... XX%"
                  pct=$(tail -n1 coverage.txt | awk '{print $(NF-1)}' | tr -d '%')
                  echo "coverage_pct=$pct" >> $GITHUB_OUTPUT
                  if [ "$pct" -lt 90 ]; then
                      echo "Coverage below threshold: ${pct}% < 90%"
                      exit 1
                  fi

            - name: Save pytest quick summary
              run: |
                  # Optional quick summary run to capture a human-friendly line
                  pytest -q |& tee pytest-raw.txt || true

            - name: Upload test & coverage artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: test-and-coverage-${{ matrix.python-version }}
                  path: |
                      junit.xml
                      coverage.xml
                      coverage.txt
                      htmlcov/

    # --- Build & Push Docker image (only once, not per matrix) ---
    build-and-push:
        name: Build & Push Docker Image (GHCR)
        needs: [test-lint-build]
        runs-on: ubuntu-latest
        if: ${{ always() && needs.test-lint-build.result == 'success' }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Set up Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Compute image metadata
              id: meta
              run: |
                  REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
                  echo "imagename=ghcr.io/${REPO_LOWER}" >> $GITHUB_OUTPUT
                  echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
                  echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT

            - name: Build and Push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  push: true
                  tags: |
                      ${{ steps.meta.outputs.imagename }}:${{ steps.meta.outputs.branch }}
                      ${{ steps.meta.outputs.imagename }}:${{ steps.meta.outputs.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            # Bonus: image security scan
            - name: Trivy scan (critical/high fail)
              uses: aquasecurity/trivy-action@0.24.0
              with:
                  image-ref: ${{ steps.meta.outputs.imagename }}:${{ steps.meta.outputs.branch }}
                  format: table
                  vuln-type: "os,library"
                  severity: "CRITICAL,HIGH"
                  exit-code: "0"   # report but don't fail the pipeline (tune as desired)

            - name: Create a combined artifact (image metadata)
              run: |
                  echo "image=${{ steps.meta.outputs.imagename }}:${{ steps.meta.outputs.branch }}" > image.txt
                  echo "image_sha=${{ steps.meta.outputs.imagename }}:${{ steps.meta.outputs.sha }}" >> image.txt
              shell: bash

            - name: Upload image metadata artifact
              uses: actions/upload-artifact@v4
              with:
                  name: image-metadata
                  path: image.txt

            - name: Gather summaries for PR comment
              id: summary
              run: |
                  # Pull coverage from one of the matrix artifacts; since we can't easily read artifacts here,
                  # we recompute quickly for the default Python to get a coverage % for the PR comment.
                  python -m pip install --upgrade pip
                  pip install pytest pytest-cov coverage
                  coverage run -m pytest -q || true
                  coverage report | tee coverage.txt
                  pct=$(tail -n1 coverage.txt | awk '{print $(NF-1)}' | tr -d '%')
                  echo "pct=$pct" >> $GITHUB_OUTPUT
                  echo "image=${{ steps.meta.outputs.imagename }}:${{ steps.meta.outputs.branch }}" >> $GITHUB_OUTPUT

            - name: Post sticky PR comment
              if: ${{ github.event_name == 'pull_request' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  recreate: true
                  path: |
                      coverage.txt
                  message: |
                      ### CI Summary
                      **Image:** `${{ steps.summary.outputs.image }}`
                      **Coverage:** `${{ steps.summary.outputs.pct }}%`

                      **Artifacts:**
                      - Test & coverage artifacts are available in the run summary for each Python version.
                      - Image metadata artifact (`image.txt`) uploaded.

                      **Security Scan:** Trivy run completed (see job logs).
